pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "dpwlscho/my-node-app"
        DOCKER_TAG = "${BUILD_NUMBER}"
        PREVIOUS_VERSION = ''
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Get Previous Version') {
            steps {
                script {
                    // 현재 운영 중인 버전 저장
                    PREVIOUS_VERSION = sh(
                        script: "docker inspect ${DOCKER_IMAGE}:latest --format='{{.Id}}' || echo 'none'",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                """
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Deploy & Health Check') {
            steps {
                script {
                    try {
                        // 새 버전 배포
                        sh """
                            docker stop app || true
                            docker rm app || true
                            docker run -d --name app ${DOCKER_IMAGE}:${DOCKER_TAG}
                            
                            # 10초 대기 후 헬스체크
                            sleep 10
                            curl -f http://localhost:3000/health || exit 1
                        """
                    } catch (Exception e) {
                        error "Deployment failed, initiating rollback..."
                    }
                }
            }
        }
    }
    
    post {
        failure {
            script {
                echo "Deployment failed, rolling back to previous version..."
                if (PREVIOUS_VERSION != 'none') {
                    sh """
                        docker stop app || true
                        docker rm app || true
                        docker run -d --name app ${DOCKER_IMAGE}@${PREVIOUS_VERSION}
                    """
                }
            }
        }
    }
}
