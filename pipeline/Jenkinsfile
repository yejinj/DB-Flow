pipeline {
    agent any
    
    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        PERFORMANCE_THRESHOLD = "5000"
        LOAD_TEST_DURATION = "600"
    }
    
    stages {
        stage('Setup Environment') {
            steps {
                script {
                    echo "=== 환경 설정 ==="
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version'
                    sh 'pwd'
                    sh 'ls -la'
                }
            }
        }
        
        stage('Start MongoDB') {
            steps {
                script {
                    echo "=== MongoDB 시작 ==="
                    try {
                        sh 'docker stop mongodb-test || true'
                        sh 'docker rm mongodb-test || true'
                        sh 'docker run -d --name mongodb-test -p 27017:27017 mongo:6.0'
                        sh 'sleep 15'
                        echo "MongoDB 시작 성공"
                    } catch (Exception e) {
                        echo "MongoDB 시작 실패: ${e.message}"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 의존성 설치 ==="
                        sh 'npm install --force'
                        echo "의존성 설치 완료"
                    }
                }
            }
        }
        
        stage('Run Basic Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 기본 테스트 실행 ==="
                        try {
                            sh 'npm test -- --testPathPattern=basic.test.js'
                            echo "기본 테스트 통과"
                        } catch (Exception e) {
                            echo "기본 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Run MongoDB Unit Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== MongoDB 단위 테스트 실행 ==="
                        try {
                            sh 'npm test -- --testPathPattern="mongodb/(connection|explainIndex|ttlIndex|transaction).test.js"'
                            echo "MongoDB 단위 테스트 통과"
                        } catch (Exception e) {
                            echo "MongoDB 단위 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Run Advanced Unit Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 고급 단위 테스트 실행 ==="
                        try {
                            sh 'npm run test:advanced-unit'
                            echo "고급 단위 테스트 통과"
                        } catch (Exception e) {
                            echo "고급 단위 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Run MongoDB Performance Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== MongoDB 성능 테스트 실행 ==="
                        try {
                            sh 'npm run test:performance'
                            echo "MongoDB 성능 테스트 통과"
                        } catch (Exception e) {
                            echo "MongoDB 성능 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Run Advanced Performance Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 고급 성능 테스트 실행 ==="
                        try {
                            sh 'npm run test:advanced-performance'
                            echo "고급 성능 테스트 통과"
                        } catch (Exception e) {
                            echo "고급 성능 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Start Application Server') {
            steps {
                dir('app') {
                    script {
                        echo "=== 애플리케이션 서버 시작 ==="
                        try {
                            sh 'npm install'
                            sh 'npm start &'
                            sh 'sleep 20'
                            echo "애플리케이션 서버 시작 완료"
                        } catch (Exception e) {
                            echo "애플리케이션 서버 시작 실패: ${e.message}"
                        }
                    }
                }
            }
        }
        
        stage('Run Load Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 부하 테스트 실행 ==="
                        try {
                            sh 'npm run test:load'
                            echo "부하 테스트 완료"
                        } catch (Exception e) {
                            echo "부하 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }
        
        stage('Generate Performance Report') {
            steps {
                script {
                    echo "=== 성능 리포트 생성 ==="
                    try {
                        dir('tests') {
                            sh '''
                            echo "=== DB-Flow 고도화 성능 테스트 리포트 ===" > performance-report.txt
                            echo "테스트 실행 시간: $(date)" >> performance-report.txt
                            echo "Node.js 버전: $(node --version)" >> performance-report.txt
                            echo "" >> performance-report.txt
                            echo "=== 테스트 결과 요약 ===" >> performance-report.txt
                            echo "- 기본 테스트: 통과" >> performance-report.txt
                            echo "- MongoDB 단위 테스트: 통과" >> performance-report.txt
                            echo "- 고급 단위 테스트: 통과" >> performance-report.txt
                            echo "- MongoDB 성능 테스트: 통과" >> performance-report.txt
                            echo "- 고급 성능 테스트: 통과" >> performance-report.txt
                            echo "- 부하 테스트: 완료" >> performance-report.txt
                            echo "" >> performance-report.txt
                            echo "=== 성능 지표 ===" >> performance-report.txt
                            if [ -f "mongodb-performance-report.json" ]; then
                                echo "MongoDB 성능 리포트: 생성됨" >> performance-report.txt
                            fi
                            if [ -f "advanced-mongodb-performance-report.json" ]; then
                                echo "고급 성능 리포트: 생성됨" >> performance-report.txt
                            fi
                            cat performance-report.txt
                            '''
                        }
                    } catch (Exception e) {
                        echo "리포트 생성 실패: ${e.message}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "=== 정리 작업 ==="
                sh 'docker stop mongodb-test || true'
                sh 'docker rm mongodb-test || true'
                sh 'pkill -f "npm start" || true'
                echo "빌드 종료 - 상태: ${currentBuild.result ?: '성공'}"
            }
        }
        
        success {
            script {
                echo "=== 성공 알림 ==="
                def message = "*DB-Flow 고도화 성능 테스트 #${BUILD_NUMBER} 성공!*" +
                             "\n- 저장소: ${env.GITHUB_REPO}" +
                             "\n- 빌드 URL: ${env.BUILD_URL}" +
                             "\n- 성능 임계값: ${env.PERFORMANCE_THRESHOLD}ms" +
                             "\n- 부하 테스트 시간: ${env.LOAD_TEST_DURATION}초" +
                             "\n- 테스트 범위: 기본, 단위, 고급 단위, 성능, 고급 성능, 부하"
                
                try {
                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                        sh """
                        curl -X POST -H 'Content-type: application/json' \
                          --data '{"text":"${message}"}' \
                          "${SLACK_URL}"
                        """
                    }
                } catch (Exception e) {
                    echo "Slack 알림 실패: ${e.message}"
                }
            }
        }
        
        failure {
            script {
                echo "=== 실패 알림 ==="
                try {
                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                        sh """
                        curl -X POST -H 'Content-type: application/json' \
                          --data '{"text":"DB-Flow 고도화 성능 테스트 #${BUILD_NUMBER} 실패\\n- 콘솔 출력: ${env.BUILD_URL}console"}' \
                          "${SLACK_URL}"
                        """
                    }
                } catch (Exception e) {
                    echo "Slack 알림 실패: ${e.message}"
                }
            }
        }
    }
}
