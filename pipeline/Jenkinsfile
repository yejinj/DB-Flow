pipeline {
    agent any

    triggers {
        githubPush()
    }

    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        DOCKER_REGISTRY = "docker.io/yejinj"
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CleanBeforeCheckout']],
                    userRemoteConfigs: [[
                        url: "https://github.com/${env.GITHUB_REPO}.git"
                    ]]
                ])
                echo "코드 체크아웃 완료"
            }
        } 
        
        stage('Setup Environment') {
            steps {
                script {
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version'
                    sh 'docker compose version'
                }
            }
        }
        
        stage('Start MongoDB') {
            steps {
                script {
                    try {
                        dir('app') {
                            sh 'docker compose up -d mongo1 mongo2 mongo3'
                            sh 'sleep 30'
                            sh 'docker compose up mongo-init'
                        }
                        echo "MongoDB 시작 성공"
                    } catch (Exception e) {
                        echo "MongoDB 시작 실패: ${e.message}"
                        echo "기본 테스트만 실행합니다."
                    }
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('tests') {
                    sh 'npm install'
                }
            }
        }
        
        stage('Run Basic Tests') {
            steps {
                dir('tests') {
                    sh 'npm test -- --testPathPattern=basic.test.js'
                }
            }
        }
        
        stage('Run MongoDB Tests') {
            when {
                expression { 
                    return sh(script: 'docker ps | grep mongo', returnStatus: true) == 0 
                }
            }
            steps {
                dir('tests') {
                    sh 'npm test -- --testPathPattern=mongodb/'
                }
            }
        }
    } 

    post {
        always {
            script {
                try {
                    dir('app') {
                        sh 'docker compose down'
                    }
                } catch (Exception e) {
                    echo "Docker 정리 실패: ${e.message}"
                }
                echo "빌드 종료 - 상태: ${currentBuild.result ?: '성공'}"
            }
        } 

        success {
            script {
                try {
                    def message = "*DB-Flow 빌드 #${BUILD_NUMBER} 성공!*" +
                                 "\n- 저장소: ${env.GITHUB_REPO}" +
                                 "\n- 빌드 URL: ${env.BUILD_URL}"

                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                        sh """
                        curl -X POST -H 'Content-type: application/json' \
                          --data '{"text":"${message}"}' \
                          "${SLACK_URL}"
                        """
                    }
                } catch (Exception e) {
                    echo "Slack 알림 실패: ${e.message}"
                }
            }
        }

        failure {
            script {
                try {
                    withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                        sh """
                        curl -X POST -H 'Content-type: application/json' \
                          --data '{"text":"DB-Flow 빌드 #${BUILD_NUMBER} 실패\\n- 콘솔 출력: ${env.BUILD_URL}console"}' \
                          "${SLACK_URL}"
                        """
                    }
                } catch (Exception e) {
                    echo "Slack 알림 실패: ${e.message}"
                }
            }
        }
    }
}
