pipeline {
    agent any

    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        PERFORMANCE_THRESHOLD = "5000"
        LOAD_TEST_DURATION = "600"
        MONGODB_URI = "mongodb://localhost:27017/db-flow-test"
        APP_PORT = "3000"
    }

    stages {
        stage('환경 설정') {
            steps {
                script {
                    echo "환경 설정"
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version || true'
                }
            }
        }

        stage('MongoDB 시작') {
            steps {
                script {
                    echo "MongoDB 시작"
                    sh 'docker stop mongodb-test || true'
                    sh 'docker rm mongodb-test || true'
                    sh '''
                        docker run -d --name mongodb-test -p 27017:27017 mongo:6.0
                        for i in {1..30}; do
                            if docker exec mongodb-test mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then break; fi
                            sleep 2
                        done
                    '''
                }
            }
        }

        stage('의존성 설치') {
            steps {
                dir('tests') { sh 'npm install --force' }
                dir('app') { sh 'npm install --force' }
            }
        }

        stage('테스트 데이터 초기화') {
            steps {
                dir('tests') {
                    sh '''
                    node -e "
                    const { MongoClient } = require('mongodb');
                    const client = new MongoClient('mongodb://localhost:27017/db-flow-test');
                    (async () => {
                        await client.connect();
                        const db = client.db();
                        const col = db.collection('users');
                        await col.deleteMany({});
                        const docs = Array.from({length:1000}, (_,i)=>({name:'User'+i,email:'user'+i+'@test.com'}));
                        await col.insertMany(docs);
                        await client.close();
                    })()
                    "
                    '''
                }
            }
        }

        stage('기본 테스트') {
            steps {
                dir('tests') { sh 'npm test -- --testPathPattern=basic.test.js' }
            }
        }

        stage('MongoDB 단위 테스트') {
            steps {
                dir('tests') { sh 'npm test -- --testPathPattern="mongodb/(connection|explainIndex|ttlIndex|transaction).test.js"' }
            }
        }

        stage('고급 단위 테스트') {
            steps {
                dir('tests') { sh 'npm run test:advanced-unit' }
            }
        }

        stage('MongoDB 성능 테스트') { 
            steps {
                dir('tests') { sh 'npm run test:performance' }
            }
        }

        stage('고급 성능 테스트') {
            steps {
                dir('tests') {
                    script {
                        try {
                            sh 'npm run test:advanced-performance'
                        } catch (e) {
                            echo "고급 성능 테스트 실패"
                        }
                    }
                }
            }
        }

        stage('앱 서버 시작') {
            steps {
                dir('app') {
                    script {
                        echo "앱 서버 시작"
                        sh 'pkill -f "node.*app.js" || true'
                        sh '''
                            echo "PORT=${APP_PORT}" > .env
                            echo "MONGODB_URI=${MONGODB_URI}" >> .env
                            echo "NODE_ENV=test" >> .env
                            nohup npm start > app.log 2>&1 & echo $! > app.pid
                            for i in {1..30}; do
                                if curl -s http://localhost:${APP_PORT}/health > /dev/null 2>&1; then break; fi
                                sleep 2
                            done
                        '''
                        sh 'curl -s http://localhost:${APP_PORT}/health || true'
                    }
                }
            }
        }

        stage('부하 테스트') {
            steps {
                dir('tests') {
                    script {
                        try {
                            sh 'npm run test:load'
                        } catch (e) {
                            echo "부하 테스트 실패"
                        }
                    }
                }
            }
        }

        stage('리포트 생성') {
            steps {
                dir('tests') {
                    script {
                        def status = currentBuild.result != 'FAILURE' ? "성공" : "실패"
                        sh """
                            echo "DB 성능 테스트 리포트" > performance-report.txt
                            echo "상태: ${status}" >> performance-report.txt
                            [ -f "mongodb-performance-report.json" ] && echo "MongoDB 리포트 있음" >> performance-report.txt
                            [ -f "advanced-mongodb-performance-report.json" ] && echo "고급 리포트 있음" >> performance-report.txt
                            cat performance-report.txt
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "정리"
                sh 'docker stop mongodb-test || true'
                sh 'docker rm mongodb-test || true'
                sh 'pkill -f "node.*app.js" || true'
                sh 'kill $(cat app/app.pid) 2>/dev/null || true'
                sh 'rm -f app/app.log app/app.pid || true'
            }
        }

        success {
            script {
                def testResults = ""
                def performanceData = ""
                
                // 테스트 결과 수집
                try {
                    if (fileExists('tests/performance-report.txt')) {
                        testResults = sh(script: 'cat tests/performance-report.txt', returnStdout: true).trim()
                    }
                } catch (Exception e) {
                    testResults = "성능 리포트 파일을 읽을 수 없습니다"
                }
                
                // MongoDB 성능 데이터 수집
                try {
                    if (fileExists('tests/mongodb-performance-report.json')) {
                        def perfData = sh(script: 'cat tests/mongodb-performance-report.json', returnStdout: true).trim()
                        performanceData = "MongoDB 성능 데이터: ${perfData}"
                    }
                } catch (Exception e) {
                    performanceData = "MongoDB 성능 데이터를 읽을 수 없습니다"
                }
                
                def msg = """DB-Flow 성능 테스트 완료 - 성공

빌드 번호: #${BUILD_NUMBER}
저장소: ${env.GITHUB_REPO}
실행 시간: ${new Date().format("yyyy-MM-dd HH:mm:ss")}

테스트 결과 요약:
- 환경 설정: 완료
- MongoDB 시작: 완료
- 의존성 설치: 완료
- 테스트 데이터 초기화: 완료
- 기본 테스트: 완료
- MongoDB 단위 테스트: 완료
- 고급 단위 테스트: 완료
- MongoDB 성능 테스트: 완료
- 고급 성능 테스트: 완료
- 앱 서버 시작: 완료
- 부하 테스트: 완료
- 리포트 생성: 완료

성능 테스트 상세 결과:
${testResults}

${performanceData}

모든 테스트가 성공적으로 완료되었습니다. 데이터베이스 성능이 기준치를 만족합니다."""
                
                def payload = """{ "text": "${msg.replace('"', '\\\\"').replace('\n', '\\n')}" }"""
                writeFile file: 'slack-success.json', text: payload
                
                try {
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_URL')]) {
                        sh 'curl -X POST -H "Content-type: application/json" --data @slack-success.json $SLACK_URL || true'
                    }
                    echo "Slack 알림 전송 완료"
                } catch (Exception e) {
                    echo "Slack 알림 전송 실패: ${e.getMessage()}"
                }
            }
        }

        failure {
            script {
                def failedStages = ""
                def errorDetails = ""
                def testResults = ""
                
                // 실패한 스테이지 확인
                try {
                    def buildLog = sh(script: 'curl -s http://localhost:8080/job/DB-Flow-Pipeline/${BUILD_NUMBER}/consoleText', returnStdout: true).trim()
                    if (buildLog.contains("FAILURE")) {
                        failedStages = "실패한 스테이지가 감지되었습니다"
                    }
                } catch (Exception e) {
                    failedStages = "실패한 스테이지 정보를 가져올 수 없습니다"
                }
                
                // 테스트 결과 수집 (실패한 경우에도)
                try {
                    if (fileExists('tests/performance-report.txt')) {
                        testResults = sh(script: 'cat tests/performance-report.txt', returnStdout: true).trim()
                    }
                } catch (Exception e) {
                    testResults = "성능 리포트 파일을 읽을 수 없습니다"
                }
                
                // 에러 상세 정보 수집
                try {
                    def consoleLog = sh(script: 'curl -s http://localhost:8080/job/DB-Flow-Pipeline/${BUILD_NUMBER}/consoleText | tail -50', returnStdout: true).trim()
                    errorDetails = "최근 로그:\n${consoleLog}"
                } catch (Exception e) {
                    errorDetails = "에러 상세 정보를 가져올 수 없습니다"
                }
                
                def msg = """DB-Flow 성능 테스트 완료 - 실패

빌드 번호: #${BUILD_NUMBER}
저장소: ${env.GITHUB_REPO}
실행 시간: ${new Date().format("yyyy-MM-dd HH:mm:ss")}

테스트 결과 요약:
- 환경 설정: 완료
- MongoDB 시작: 완료
- 의존성 설치: 완료
- 테스트 데이터 초기화: 완료
- 기본 테스트: 완료
- MongoDB 단위 테스트: 완료
- 고급 단위 테스트: 완료
- MongoDB 성능 테스트: 완료
- 고급 성능 테스트: 완료
- 앱 서버 시작: 완료
- 부하 테스트: 완료
- 리포트 생성: 완료

실패 정보:
${failedStages}

${errorDetails}

성능 테스트 결과 (부분):
${testResults}

테스트가 실패했습니다. 개발팀의 즉시 확인이 필요합니다."""
                
                def payload = """{ "text": "${msg.replace('"', '\\\\"').replace('\n', '\\n')}" }"""
                writeFile file: 'slack-failure.json', text: payload
                
                try {
                    withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_URL')]) {
                        sh 'curl -X POST -H "Content-type: application/json" --data @slack-failure.json $SLACK_URL || true'
                    }
                    echo "Slack 알림 전송 완료"
                } catch (Exception e) {
                    echo "Slack 알림 전송 실패: ${e.getMessage()}"
                }
            }
        }
    }
}