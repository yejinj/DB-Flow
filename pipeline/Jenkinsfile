pipeline {
    agent any

    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        PERFORMANCE_THRESHOLD = "5000"
        LOAD_TEST_DURATION = "600"
        MONGODB_URI = "mongodb://localhost:27017/db-flow-test"
        APP_PORT = "3000"
    }

    stages {
        stage('환경 설정') {
            steps {
                script {
                    echo "환경 설정"
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version || true'
                }
            }
        }

        stage('MongoDB 시작') {
            steps {
                script {
                    echo "MongoDB 시작"
                    sh 'docker stop mongodb-test || true'
                    sh 'docker rm mongodb-test || true'
                    sh '''
                        docker run -d --name mongodb-test -p 27017:27017 mongo:6.0
                        for i in {1..30}; do
                            if docker exec mongodb-test mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then break; fi
                            sleep 2
                        done
                    '''
                }
            }
        }

        stage('의존성 설치') {
            steps {
                dir('tests') { sh 'npm install --force' }
                dir('app') { sh 'npm install --force' }
            }
        }

        stage('테스트 데이터 초기화') {
            steps {
                dir('tests') {
                    sh '''
                    node -e "
                    const { MongoClient } = require('mongodb');
                    const client = new MongoClient('mongodb://localhost:27017/db-flow-test');
                    (async () => {
                        await client.connect();
                        const db = client.db();
                        const col = db.collection('users');
                        await col.deleteMany({});
                        const docs = Array.from({length:1000}, (_,i)=>({name:'User'+i,email:'user'+i+'@test.com'}));
                        await col.insertMany(docs);
                        await client.close();
                    })()
                    "
                    '''
                }
            }
        }

        stage('기본 테스트') {
            steps {
                dir('tests') { sh 'npm test -- --testPathPattern=basic.test.js' }
            }
        }

        stage('MongoDB 단위 테스트') {
            steps {
                dir('tests') { sh 'npm test -- --testPathPattern="mongodb/(connection|explainIndex|ttlIndex|transaction).test.js"' }
            }
        }

        stage('고급 단위 테스트') {
            steps {
                dir('tests') { sh 'npm run test:advanced-unit' }
            }
        }

        stage('MongoDB 성능 테스트') {
            steps {
                dir('tests') { sh 'npm run test:performance' }
            }
        }

        stage('고급 성능 테스트') {
            steps {
                dir('tests') {
                    script {
                        try {
                            sh 'npm run test:advanced-performance'
                        } catch (e) {
                            echo "고급 성능 테스트 실패"
                        }
                    }
                }
            }
        }

        stage('앱 서버 시작') {
            steps {
                dir('app') {
                    script {
                        echo "앱 서버 시작"
                        sh 'pkill -f "node.*app.js" || true'
                        sh '''
                            echo "PORT=${APP_PORT}" > .env
                            echo "MONGODB_URI=${MONGODB_URI}" >> .env
                            echo "NODE_ENV=test" >> .env
                            nohup npm start > app.log 2>&1 & echo $! > app.pid
                            for i in {1..30}; do
                                if curl -s http://localhost:${APP_PORT}/health > /dev/null 2>&1; then break; fi
                                sleep 2
                            done
                        '''
                        sh 'curl -s http://localhost:${APP_PORT}/health || true'
                    }
                }
            }
        }

        stage('부하 테스트') {
            steps {
                dir('tests') {
                    script {
                        try {
                            sh 'npm run test:load'
                        } catch (e) {
                            echo "부하 테스트 실패"
                        }
                    }
                }
            }
        }

        stage('리포트 생성') {
            steps {
                dir('tests') {
                    script {
                        def status = currentBuild.result != 'FAILURE' ? "성공" : "실패"
                        sh """
                            echo "DB 성능 테스트 리포트" > performance-report.txt
                            echo "상태: ${status}" >> performance-report.txt
                            [ -f "mongodb-performance-report.json" ] && echo "MongoDB 리포트 있음" >> performance-report.txt
                            [ -f "advanced-mongodb-performance-report.json" ] && echo "고급 리포트 있음" >> performance-report.txt
                            cat performance-report.txt
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "정리"
                sh 'docker stop mongodb-test || true'
                sh 'docker rm mongodb-test || true'
                sh 'pkill -f "node.*app.js" || true'
                sh 'kill $(cat app/app.pid) 2>/dev/null || true'
                sh 'rm -f app/app.log app/app.pid || true'
            }
        }

        success {
            script {
                def msg = """DB 테스트 #${BUILD_NUMBER} 성공\n저장소: ${env.GITHUB_REPO}\nURL: ${env.BUILD_URL}"""
                def payload = """{ "text": "${msg.replace('"', '\\\\"')}" }"""
                writeFile file: 'slack-success.json', text: payload
                                 withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_URL')]) {
                     sh 'curl -X POST -H "Content-type: application/json" --data @slack-success.json $SLACK_URL || true'
                 }
            }
        }

        failure {
            script {
                def msg = """DB 테스트 #${BUILD_NUMBER} 실패\n저장소: ${env.GITHUB_REPO}\nURL: ${env.BUILD_URL}console"""
                def payload = """{ "text": "${msg.replace('"', '\\\\"')}" }"""
                writeFile file: 'slack-failure.json', text: payload
                                 withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_URL')]) {
                     sh 'curl -X POST -H "Content-type: application/json" --data @slack-failure.json $SLACK_URL || true'
                 }
            }
        }
    }
}