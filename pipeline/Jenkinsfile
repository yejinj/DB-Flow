pipeline {
    agent any

    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        PERFORMANCE_THRESHOLD = "5000"
        LOAD_TEST_DURATION = "600"
        MONGODB_URI = "mongodb://localhost:27017/db-flow-test"
        APP_PORT = "3000"
    }

    stages {
        stage('환경 설정') {
            steps {
                script {
                    echo "환경 설정"
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version || true'
                }
            }
        }

        stage('MongoDB 시작') {
            steps {
                script {
                    echo "MongoDB 시작"
                    sh 'docker stop mongodb-test || true'
                    sh 'docker rm mongodb-test || true'
                    sh '''
                        docker run -d --name mongodb-test -p 27017:27017 mongo:6.0
                        for i in {1..30}; do
                            if docker exec mongodb-test mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then break; fi
                            sleep 2
                        done
                    '''
                }
            }
        }

        stage('의존성 설치') {
            steps {
                dir('tests') { sh 'npm install --force' }
                dir('app') { sh 'npm install --force' }
            }
        }

        stage('테스트 데이터 초기화') {
            steps {
                dir('tests') {
                    sh '''
                    node -e "
                    const { MongoClient } = require('mongodb');
                    const client = new MongoClient('mongodb://localhost:27017/db-flow-test');
                    (async () => {
                        await client.connect();
                        const db = client.db();
                        const col = db.collection('users');
                        await col.deleteMany({});
                        const docs = Array.from({length:1000}, (_,i)=>({name:'User'+i,email:'user'+i+'@test.com'}));
                        await col.insertMany(docs);
                        await client.close();
                    })()"
                    '''
                }
            }
        }

        stage('MongoDB 단위 테스트') {
            steps {
                dir('tests') {
                    echo "MongoDB의 기본 CRUD 동작을 검증합니다."
                    echo "MongoDB가 최소한의 기능을 수행할 수 있는 상태인지를 빠르게 점검합니다."
                    sh 'npm test -- --testPathPattern="mongodb/(connection|ttlIndex|transaction).test.js"'
                }
            }
        }

        stage('심화 단위 테스트') {
            steps {
                dir('tests') {
                    echo "TTL 필드 누락, 인덱스 순서 불일치 같은 조용한 실패를 검출합니다."
                    echo "MongoDB 고급 인덱싱 기능의 정확성을 검증합니다."
                    sh 'npm run test:advanced-unit'
                }
            }
        }

        stage('MongoDB 성능 테스트') {
            steps {
                dir('tests') {
                    echo "초당 약 20건 요청으로 총 1만 건 이상 트랜잭션을 처리하며 성능을 측정합니다."
                    echo "응답 시간 200ms 이하, 오류율 1% 이하 조건을 기준으로 테스트 결과를 판별합니다."
                    sh 'npm run test:performance'
                }
            }
        }

        stage('심화 성능 테스트') {
            steps {
                dir('tests') {
                    echo "동시 사용자 100명, 초당 100건 이상 요청으로 총 5만 건 이상 처리하면서 자원 한계와 병목을 분석합니다."
                    echo "CPU 사용률 85% 이상 또는 I/O 대기 시간 200ms 초과 시 병목으로 판단합니다."
                    sh 'npm run test:advanced-performance'
                }
            }
        }
    }
}
