pipeline {
    agent any
    
    environment {
        GITHUB_REPO = "yejinj/DB-Flow"
        PERFORMANCE_THRESHOLD = "5000"
        LOAD_TEST_DURATION = "600"
        MONGODB_URI = "mongodb://localhost:27017/db-flow-test"
        APP_PORT = "3000"
    }
    
    stages {
        stage('Setup Environment') {
            steps {
                script {
                    echo "=== 환경 설정 ==="
                    sh 'node --version'
                    sh 'npm --version'
                    sh 'docker --version || echo "Docker not available"'
                    sh 'pwd'
                    sh 'ls -la'
                    
                    // Docker 권한 문제 해결
                    sh 'sudo usermod -aG docker jenkins || true'
                    sh 'sudo chmod 666 /var/run/docker.sock || true'
                }
            }
        }

        stage('Start MongoDB') {
            steps {
                script {
                    echo "=== MongoDB 시작 ==="
                    try {
                        // 기존 컨테이너 정리
                        sh 'docker stop mongodb-test || true'
                        sh 'docker rm mongodb-test || true'
                        
                        // MongoDB 컨테이너 시작
                        sh '''
                        docker run -d --name mongodb-test \
                            -p 27017:27017 \
                            -e MONGO_INITDB_DATABASE=db-flow-test \
                            mongo:6.0 --quiet
                        '''
                        
                        // MongoDB 시작 대기
                        sh '''
                        echo "MongoDB 시작 대기 중..."
                        for i in {1..30}; do
                            if docker exec mongodb-test mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
                                echo "MongoDB 시작 완료!"
                                break
                            fi
                            echo "대기 중... ($i/30)"
                            sleep 2
                        done
                        '''
                        
                        // MongoDB 상태 확인
                        sh 'docker exec mongodb-test mongosh --eval "db.adminCommand(\"ping\")"'
                        echo "MongoDB 시작 성공"
                        
                    } catch (Exception e) {
                        echo "MongoDB 시작 실패: ${e.message}"
                        sh 'docker logs mongodb-test || true'
                        currentBuild.result = 'FAILURE'
                        error("MongoDB 시작 실패")
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 의존성 설치 ==="
                        sh 'npm install --force'
                    }
                }
                dir('app') {
                    script {
                        echo "=== 애플리케이션 의존성 설치 ==="
                        sh 'npm install --force'
                    }
                }
            }
        }

        stage('Initialize Test Data') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 테스트 데이터 초기화 ==="
                        try {
                            // MongoDB에 테스트 데이터 삽입
                            sh '''
                            node -e "
                            const { MongoClient } = require('mongodb');
                            const client = new MongoClient('mongodb://localhost:27017/db-flow-test');
                            
                            async function initTestData() {
                                try {
                                    await client.connect();
                                    const db = client.db('db-flow-test');
                                    const collection = db.collection('users');
                                    
                                    // 기존 데이터 삭제
                                    await collection.deleteMany({});
                                    
                                    // 테스트 데이터 생성
                                    const testData = [];
                                    for (let i = 0; i < 1000; i++) {
                                        testData.push({
                                            name: 'User' + i,
                                            email: 'user' + i + '@test.com',
                                            age: 20 + (i % 50),
                                            status: i % 3 === 0 ? 'active' : 'inactive',
                                            score: Math.floor(Math.random() * 100),
                                            createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
                                            tags: ['tag' + (i % 5), 'tag' + ((i + 1) % 5)]
                                        });
                                    }
                                    
                                    await collection.insertMany(testData);
                                    console.log('테스트 데이터 초기화 완료:', testData.length, '개 문서');
                                    
                                    // 인덱스 생성
                                    await collection.createIndex({ age: 1 });
                                    await collection.createIndex({ status: 1 });
                                    await collection.createIndex({ score: -1 });
                                    await collection.createIndex({ createdAt: 1 });
                                    console.log('인덱스 생성 완료');
                                    
                                } catch (error) {
                                    console.error('테스트 데이터 초기화 실패:', error);
                                    throw error;
                                } finally {
                                    await client.close();
                                }
                            }
                            
                            initTestData();
                            "
                            '''
                            echo "테스트 데이터 초기화 성공"
                        } catch (e) {
                            echo "테스트 데이터 초기화 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Run Basic Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 기본 테스트 실행 ==="
                        try {
                            sh 'npm test -- --testPathPattern=basic.test.js --verbose'
                        } catch (e) {
                            echo "기본 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Run MongoDB Unit Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== MongoDB 단위 테스트 실행 ==="
                        try {
                            sh 'npm test -- --testPathPattern="mongodb/(connection|explainIndex|ttlIndex|transaction).test.js" --verbose'
                        } catch (e) {
                            echo "MongoDB 단위 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Run Advanced Unit Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 고급 단위 테스트 실행 ==="
                        try {
                            sh 'npm run test:advanced-unit -- --verbose'
                        } catch (e) {
                            echo "고급 단위 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Run MongoDB Performance Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== MongoDB 성능 테스트 실행 ==="
                        try {
                            sh 'npm run test:performance -- --verbose'
                        } catch (e) {
                            echo "MongoDB 성능 테스트 실패: ${e.message}"
                            currentBuild.result = 'FAILURE'
                        }
                    }
                }
            }
        }

        stage('Run Advanced Performance Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 고급 성능 테스트 실행 ==="
                        try {
                            sh 'npm run test:advanced-performance -- --verbose'
                        } catch (e) {
                            echo "고급 성능 테스트 실패: ${e.message}"
                            // 고급 성능 테스트는 실패해도 빌드를 중단하지 않음
                            echo "고급 성능 테스트 실패했지만 빌드 계속 진행"
                        }
                    }
                }
            }
        }

        stage('Start Application Server') {
            steps {
                dir('app') {
                    script {
                        echo "=== 애플리케이션 서버 시작 ==="
                        try {
                            // 기존 프로세스 정리
                            sh 'pkill -f "node.*app.js" || true'
                            sh 'sleep 2'
                            
                            // 환경 변수 설정
                            sh '''
                            echo "PORT=${APP_PORT}" > .env
                            echo "MONGODB_URI=${MONGODB_URI}" >> .env
                            echo "NODE_ENV=test" >> .env
                            '''
                            
                            // 서버 시작
                            sh 'nohup npm start > app.log 2>&1 & echo $! > app.pid'
                            
                            // 서버 시작 대기
                            sh '''
                            echo "애플리케이션 서버 시작 대기 중..."
                            for i in {1..30}; do
                                if curl -s http://localhost:${APP_PORT}/health > /dev/null 2>&1; then
                                    echo "애플리케이션 서버 시작 완료!"
                                    break
                                fi
                                echo "대기 중... ($i/30)"
                                sleep 2
                            done
                            '''
                            
                            // 서버 상태 확인
                            sh 'curl -s http://localhost:${APP_PORT}/health || echo "서버 응답 없음"'
                            echo "애플리케이션 서버 시작 성공"
                            
                        } catch (e) {
                            echo "애플리케이션 서버 시작 실패: ${e.message}"
                            sh 'cat app.log || true'
                        }
                    }
                }
            }
        }

        stage('Run Load Tests') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 부하 테스트 실행 ==="
                        try {
                            sh 'npm run test:load -- --verbose'
                        } catch (e) {
                            echo "부하 테스트 실패: ${e.message}"
                            // 부하 테스트는 실패해도 빌드를 중단하지 않음
                            echo "부하 테스트 실패했지만 빌드 계속 진행"
                        }
                    }
                }
            }
        }

        stage('Generate Performance Report') {
            steps {
                dir('tests') {
                    script {
                        echo "=== 성능 리포트 생성 ==="
                        def buildStatus = currentBuild.result != 'FAILURE' ? "성공" : "실패"
                        sh '''
                        echo "=== DB-Flow 고도화 성능 테스트 리포트 ===" > performance-report.txt
                        echo "테스트 실행 시간: $(date)" >> performance-report.txt
                        echo "Node.js 버전: $(node --version)" >> performance-report.txt
                        echo "MongoDB 버전: $(docker exec mongodb-test mongosh --eval "db.version()" --quiet | tail -1)" >> performance-report.txt
                        echo "" >> performance-report.txt
                        echo "=== 테스트 결과 요약 ===" >> performance-report.txt
                        echo "- 빌드 상태: ''' + buildStatus + '''" >> performance-report.txt
                        echo "- 기본 테스트: 실행됨" >> performance-report.txt
                        echo "- MongoDB 단위 테스트: 실행됨" >> performance-report.txt
                        echo "- 고급 단위 테스트: 실행됨" >> performance-report.txt
                        echo "- MongoDB 성능 테스트: 실행됨" >> performance-report.txt
                        echo "- 고급 성능 테스트: 실행됨" >> performance-report.txt
                        echo "- 부하 테스트: 실행됨" >> performance-report.txt
                        echo "" >> performance-report.txt
                        echo "=== 성능 지표 ===" >> performance-report.txt
                        if [ -f "mongodb-performance-report.json" ]; then
                            echo "MongoDB 성능 리포트: 생성됨" >> performance-report.txt
                        fi
                        if [ -f "advanced-mongodb-performance-report.json" ]; then
                            echo "고급 성능 리포트: 생성됨" >> performance-report.txt
                        fi
                        echo "" >> performance-report.txt
                        echo "=== 시스템 정보 ===" >> performance-report.txt
                        echo "CPU: $(nproc) 코어" >> performance-report.txt
                        echo "메모리: $(free -h | grep Mem | awk '{print $2}')" >> performance-report.txt
                        echo "디스크: $(df -h / | tail -1 | awk '{print $4}') 사용 가능" >> performance-report.txt
                        cat performance-report.txt
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== 정리 작업 ==="
                try {
                    // MongoDB 컨테이너 정리
                    sh 'docker stop mongodb-test || true'
                    sh 'docker rm mongodb-test || true'
                    
                    // 애플리케이션 서버 정리
                    sh 'pkill -f "node.*app.js" || true'
                    sh 'kill $(cat app/app.pid) 2>/dev/null || true'
                    
                    // 로그 파일 정리
                    sh 'rm -f app/app.log app/app.pid || true'
                    
                    echo "정리 작업 완료"
                } catch (e) {
                    echo "정리 작업 중 오류: ${e.message}"
                }
            }
        }

        success {
            script {
                echo "=== 성공 알림 ==="
                def message = """*DB-Flow 고도화 성능 테스트 #${BUILD_NUMBER} 성공!*
- 저장소: ${env.GITHUB_REPO}
- 빌드 URL: ${env.BUILD_URL}
- 성능 임계값: ${env.PERFORMANCE_THRESHOLD}ms
- 부하 테스트 시간: ${env.LOAD_TEST_DURATION}초
- 테스트 범위: 기본, 단위, 고급 단위, 성능, 고급 성능, 부하
- MongoDB: 정상 실행
- 애플리케이션 서버: 정상 실행"""
                withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                    sh '''
                    curl -X POST -H 'Content-type: application/json' \
                         --data '{"text": "'"${message//\"/\\\"}"'"}' \
                         '$SLACK_URL' || echo "Slack 알림 전송 실패"
                    '''
                }
            }
        }

        failure {
            script {
                echo "=== 실패 알림 ==="
                def message = """*DB-Flow 고도화 성능 테스트 #${BUILD_NUMBER} 실패!*
- 저장소: ${env.GITHUB_REPO}
- 빌드 URL: ${env.BUILD_URL}
- 실패 단계: ${env.STAGE_NAME ?: '알 수 없음'}
- 콘솔 출력: ${env.BUILD_URL}console"""
                withCredentials([string(credentialsId: 'slack-webhook', variable: 'SLACK_URL')]) {
                    sh '''
                    curl -X POST -H 'Content-type: application/json' \
                         --data '{"text": "'"${message//\"/\\\"}"'"}' \
                         '$SLACK_URL' || echo "Slack 알림 전송 실패"
                    '''
                }
            }
        }
    }
}
